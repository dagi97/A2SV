# Problem: Minimize Malware Spread - https://leetcode.com/problems/minimize-malware-spread/

class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n

    def find(self, x):
        if self.parent[x] == -1:
            return -1
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y, initial):
        root_x = self.find(x)
        root_y = self.find(y)

        if root_x == root_y:
            return 

        if root_x in initial and root_y not in initial and root_y != -1:
            self.parent[root_y] = root_x
        elif root_y in initial and root_x not in initial and root_x != -1:
            self.parent[root_x] = root_y
        elif root_x != -1 and root_y != -1 and root_y not in initial and root_x not in initial:
            if self.rank[root_x] < self.rank[root_y]:
                self.parent[root_x] = root_y
            elif self.rank[root_x] > self.rank[root_y]:
                self.parent[root_y] = root_x
            else:
                self.parent[root_y] = root_x
                self.rank[root_x] += 1
        elif root_x != -1 and root_y != -1:
            self.parent[root_x] = -1
            self.parent[root_y] = -1
        elif root_x != -1:
            self.parent[root_x] = -1
        else:
            self.parent[root_y] = -1

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        dsu = UnionFind(n)
        initt = set(initial)
        for i in range(n):
            for j in range(n):
                if graph[i][j] == 1: 
                    dsu.union(i,j, initt)
        size = Counter()
        for i in range(n):
            root = dsu.find(i)
            if root!= -1:
                size[root] += 1
        check = Counter()
        for i in initt:
            root = dsu.find(i)
            if root != -1:
                check[root] += 1
        
        
        initial.sort()
        c = -1 
        ans = initial[0]
        for i in initial:
            root = dsu.find(i)
            if root != -1:
                if size[i] > c and check[i] == 1:
                    c = size[i]
                    ans = i
        return ans


            